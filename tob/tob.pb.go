// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tob.proto

/*
Package tob is a generated protocol buffer package.

It is generated from these files:
	tob.proto

It has these top-level messages:
	Empty
	ServerChangeEvent
	ServerEvent
	Vector
	PlayerMoveEvent
	PlayerCastEvent
	PlayerAppearance
	PlayerEquiped
	PlayerAnimationEvent
	PlayerEvent
	MonsterSpawnEvent
	MonsterMoveEvent
	MonsterLootEvent
	MonsterDieEvent
	MonsterEvent
	Event
*/
package tob

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventTopic int32

const (
	EventTopic_SERVER_EVENT  EventTopic = 0
	EventTopic_PLAYER_EVENT  EventTopic = 1
	EventTopic_MONSTER_EVENT EventTopic = 2
)

var EventTopic_name = map[int32]string{
	0: "SERVER_EVENT",
	1: "PLAYER_EVENT",
	2: "MONSTER_EVENT",
}
var EventTopic_value = map[string]int32{
	"SERVER_EVENT":  0,
	"PLAYER_EVENT":  1,
	"MONSTER_EVENT": 2,
}

func (x EventTopic) String() string {
	return proto.EnumName(EventTopic_name, int32(x))
}
func (EventTopic) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerEventType int32

const (
	ServerEventType_SERVER_CHANGE ServerEventType = 0
	ServerEventType_SERVER_YIELD  ServerEventType = 1
)

var ServerEventType_name = map[int32]string{
	0: "SERVER_CHANGE",
	1: "SERVER_YIELD",
}
var ServerEventType_value = map[string]int32{
	"SERVER_CHANGE": 0,
	"SERVER_YIELD":  1,
}

func (x ServerEventType) String() string {
	return proto.EnumName(ServerEventType_name, int32(x))
}
func (ServerEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PlayerEventType int32

const (
	PlayerEventType_PLAYER_ENTER     PlayerEventType = 0
	PlayerEventType_PLAYER_EXIT      PlayerEventType = 1
	PlayerEventType_PLAYER_MOVE      PlayerEventType = 2
	PlayerEventType_PLAYER_CAST      PlayerEventType = 3
	PlayerEventType_PLAYER_DAMAGED   PlayerEventType = 4
	PlayerEventType_PLAYER_DIE       PlayerEventType = 5
	PlayerEventType_PLAYER_JUMP      PlayerEventType = 6
	PlayerEventType_PLAYER_CROUCH    PlayerEventType = 7
	PlayerEventType_PLAYER_POSITION  PlayerEventType = 8
	PlayerEventType_PLAYER_EQUIPPED  PlayerEventType = 9
	PlayerEventType_PLAYER_ANIMATION PlayerEventType = 10
)

var PlayerEventType_name = map[int32]string{
	0:  "PLAYER_ENTER",
	1:  "PLAYER_EXIT",
	2:  "PLAYER_MOVE",
	3:  "PLAYER_CAST",
	4:  "PLAYER_DAMAGED",
	5:  "PLAYER_DIE",
	6:  "PLAYER_JUMP",
	7:  "PLAYER_CROUCH",
	8:  "PLAYER_POSITION",
	9:  "PLAYER_EQUIPPED",
	10: "PLAYER_ANIMATION",
}
var PlayerEventType_value = map[string]int32{
	"PLAYER_ENTER":     0,
	"PLAYER_EXIT":      1,
	"PLAYER_MOVE":      2,
	"PLAYER_CAST":      3,
	"PLAYER_DAMAGED":   4,
	"PLAYER_DIE":       5,
	"PLAYER_JUMP":      6,
	"PLAYER_CROUCH":    7,
	"PLAYER_POSITION":  8,
	"PLAYER_EQUIPPED":  9,
	"PLAYER_ANIMATION": 10,
}

func (x PlayerEventType) String() string {
	return proto.EnumName(PlayerEventType_name, int32(x))
}
func (PlayerEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Gender int32

const (
	Gender_MALE   Gender = 0
	Gender_FEMALE Gender = 1
)

var Gender_name = map[int32]string{
	0: "MALE",
	1: "FEMALE",
}
var Gender_value = map[string]int32{
	"MALE":   0,
	"FEMALE": 1,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type MonsterEventType int32

const (
	MonsterEventType_MONSTER_SPAWN       MonsterEventType = 0
	MonsterEventType_MONSTER_MOVE        MonsterEventType = 1
	MonsterEventType_MONSTER_ATTACK      MonsterEventType = 2
	MonsterEventType_MONSTER_DIE         MonsterEventType = 3
	MonsterEventType_MONSTER_DESTROY     MonsterEventType = 4
	MonsterEventType_MONSTER_LOOT        MonsterEventType = 5
	MonsterEventType_MONSTER_LOOT_RESULT MonsterEventType = 6
	MonsterEventType_MONSTER_BACK        MonsterEventType = 7
)

var MonsterEventType_name = map[int32]string{
	0: "MONSTER_SPAWN",
	1: "MONSTER_MOVE",
	2: "MONSTER_ATTACK",
	3: "MONSTER_DIE",
	4: "MONSTER_DESTROY",
	5: "MONSTER_LOOT",
	6: "MONSTER_LOOT_RESULT",
	7: "MONSTER_BACK",
}
var MonsterEventType_value = map[string]int32{
	"MONSTER_SPAWN":       0,
	"MONSTER_MOVE":        1,
	"MONSTER_ATTACK":      2,
	"MONSTER_DIE":         3,
	"MONSTER_DESTROY":     4,
	"MONSTER_LOOT":        5,
	"MONSTER_LOOT_RESULT": 6,
	"MONSTER_BACK":        7,
}

func (x MonsterEventType) String() string {
	return proto.EnumName(MonsterEventType_name, int32(x))
}
func (MonsterEventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ServerChangeEvent struct {
	Previous string `protobuf:"bytes,1,opt,name=previous" json:"previous,omitempty"`
	Current  string `protobuf:"bytes,2,opt,name=current" json:"current,omitempty"`
}

func (m *ServerChangeEvent) Reset()                    { *m = ServerChangeEvent{} }
func (m *ServerChangeEvent) String() string            { return proto.CompactTextString(m) }
func (*ServerChangeEvent) ProtoMessage()               {}
func (*ServerChangeEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerChangeEvent) GetPrevious() string {
	if m != nil {
		return m.Previous
	}
	return ""
}

func (m *ServerChangeEvent) GetCurrent() string {
	if m != nil {
		return m.Current
	}
	return ""
}

type ServerEvent struct {
	Id   string          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type ServerEventType `protobuf:"varint,2,opt,name=type,enum=tob.ServerEventType" json:"type,omitempty"`
}

func (m *ServerEvent) Reset()                    { *m = ServerEvent{} }
func (m *ServerEvent) String() string            { return proto.CompactTextString(m) }
func (*ServerEvent) ProtoMessage()               {}
func (*ServerEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ServerEvent) GetType() ServerEventType {
	if m != nil {
		return m.Type
	}
	return ServerEventType_SERVER_CHANGE
}

type Vector struct {
	X float32 `protobuf:"fixed32,1,opt,name=x" json:"x,omitempty"`
	Y float32 `protobuf:"fixed32,2,opt,name=y" json:"y,omitempty"`
	Z float32 `protobuf:"fixed32,3,opt,name=z" json:"z,omitempty"`
}

func (m *Vector) Reset()                    { *m = Vector{} }
func (m *Vector) String() string            { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()               {}
func (*Vector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Vector) GetX() float32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Vector) GetY() float32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Vector) GetZ() float32 {
	if m != nil {
		return m.Z
	}
	return 0
}

type PlayerMoveEvent struct {
	Target    *Vector `protobuf:"bytes,1,opt,name=target" json:"target,omitempty"`
	Direction *Vector `protobuf:"bytes,2,opt,name=direction" json:"direction,omitempty"`
}

func (m *PlayerMoveEvent) Reset()                    { *m = PlayerMoveEvent{} }
func (m *PlayerMoveEvent) String() string            { return proto.CompactTextString(m) }
func (*PlayerMoveEvent) ProtoMessage()               {}
func (*PlayerMoveEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayerMoveEvent) GetTarget() *Vector {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *PlayerMoveEvent) GetDirection() *Vector {
	if m != nil {
		return m.Direction
	}
	return nil
}

type PlayerCastEvent struct {
	Id             string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TargetId       string  `protobuf:"bytes,2,opt,name=targetId" json:"targetId,omitempty"`
	TargetPosition *Vector `protobuf:"bytes,3,opt,name=targetPosition" json:"targetPosition,omitempty"`
}

func (m *PlayerCastEvent) Reset()                    { *m = PlayerCastEvent{} }
func (m *PlayerCastEvent) String() string            { return proto.CompactTextString(m) }
func (*PlayerCastEvent) ProtoMessage()               {}
func (*PlayerCastEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlayerCastEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerCastEvent) GetTargetId() string {
	if m != nil {
		return m.TargetId
	}
	return ""
}

func (m *PlayerCastEvent) GetTargetPosition() *Vector {
	if m != nil {
		return m.TargetPosition
	}
	return nil
}

type PlayerAppearance struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Gender    Gender `protobuf:"varint,2,opt,name=gender,enum=tob.Gender" json:"gender,omitempty"`
	HairColor int32  `protobuf:"varint,3,opt,name=hairColor" json:"hairColor,omitempty"`
}

func (m *PlayerAppearance) Reset()                    { *m = PlayerAppearance{} }
func (m *PlayerAppearance) String() string            { return proto.CompactTextString(m) }
func (*PlayerAppearance) ProtoMessage()               {}
func (*PlayerAppearance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PlayerAppearance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerAppearance) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_MALE
}

func (m *PlayerAppearance) GetHairColor() int32 {
	if m != nil {
		return m.HairColor
	}
	return 0
}

type PlayerEquiped struct {
	Weapon string `protobuf:"bytes,1,opt,name=weapon" json:"weapon,omitempty"`
	Head   string `protobuf:"bytes,2,opt,name=head" json:"head,omitempty"`
	Chest  string `protobuf:"bytes,3,opt,name=chest" json:"chest,omitempty"`
	Legs   string `protobuf:"bytes,4,opt,name=legs" json:"legs,omitempty"`
	Shoes  string `protobuf:"bytes,5,opt,name=shoes" json:"shoes,omitempty"`
	Shield string `protobuf:"bytes,6,opt,name=shield" json:"shield,omitempty"`
}

func (m *PlayerEquiped) Reset()                    { *m = PlayerEquiped{} }
func (m *PlayerEquiped) String() string            { return proto.CompactTextString(m) }
func (*PlayerEquiped) ProtoMessage()               {}
func (*PlayerEquiped) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PlayerEquiped) GetWeapon() string {
	if m != nil {
		return m.Weapon
	}
	return ""
}

func (m *PlayerEquiped) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *PlayerEquiped) GetChest() string {
	if m != nil {
		return m.Chest
	}
	return ""
}

func (m *PlayerEquiped) GetLegs() string {
	if m != nil {
		return m.Legs
	}
	return ""
}

func (m *PlayerEquiped) GetShoes() string {
	if m != nil {
		return m.Shoes
	}
	return ""
}

func (m *PlayerEquiped) GetShield() string {
	if m != nil {
		return m.Shield
	}
	return ""
}

type PlayerAnimationEvent struct {
	StateHash      []int32   `protobuf:"varint,1,rep,packed,name=stateHash" json:"stateHash,omitempty"`
	NormalizedTime []float32 `protobuf:"fixed32,2,rep,packed,name=normalizedTime" json:"normalizedTime,omitempty"`
	IntParams      []int32   `protobuf:"varint,3,rep,packed,name=intParams" json:"intParams,omitempty"`
	FloatParams    []float32 `protobuf:"fixed32,4,rep,packed,name=floatParams" json:"floatParams,omitempty"`
	BoolParams     []bool    `protobuf:"varint,5,rep,packed,name=boolParams" json:"boolParams,omitempty"`
}

func (m *PlayerAnimationEvent) Reset()                    { *m = PlayerAnimationEvent{} }
func (m *PlayerAnimationEvent) String() string            { return proto.CompactTextString(m) }
func (*PlayerAnimationEvent) ProtoMessage()               {}
func (*PlayerAnimationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PlayerAnimationEvent) GetStateHash() []int32 {
	if m != nil {
		return m.StateHash
	}
	return nil
}

func (m *PlayerAnimationEvent) GetNormalizedTime() []float32 {
	if m != nil {
		return m.NormalizedTime
	}
	return nil
}

func (m *PlayerAnimationEvent) GetIntParams() []int32 {
	if m != nil {
		return m.IntParams
	}
	return nil
}

func (m *PlayerAnimationEvent) GetFloatParams() []float32 {
	if m != nil {
		return m.FloatParams
	}
	return nil
}

func (m *PlayerAnimationEvent) GetBoolParams() []bool {
	if m != nil {
		return m.BoolParams
	}
	return nil
}

type PlayerEvent struct {
	Id         string                `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type       PlayerEventType       `protobuf:"varint,2,opt,name=type,enum=tob.PlayerEventType" json:"type,omitempty"`
	Move       *PlayerMoveEvent      `protobuf:"bytes,3,opt,name=move" json:"move,omitempty"`
	Position   *Vector               `protobuf:"bytes,4,opt,name=position" json:"position,omitempty"`
	Cast       *PlayerCastEvent      `protobuf:"bytes,5,opt,name=cast" json:"cast,omitempty"`
	Damage     float32               `protobuf:"fixed32,6,opt,name=damage" json:"damage,omitempty"`
	Appearance *PlayerAppearance     `protobuf:"bytes,7,opt,name=appearance" json:"appearance,omitempty"`
	Equiped    *PlayerEquiped        `protobuf:"bytes,8,opt,name=equiped" json:"equiped,omitempty"`
	Animation  *PlayerAnimationEvent `protobuf:"bytes,9,opt,name=animation" json:"animation,omitempty"`
}

func (m *PlayerEvent) Reset()                    { *m = PlayerEvent{} }
func (m *PlayerEvent) String() string            { return proto.CompactTextString(m) }
func (*PlayerEvent) ProtoMessage()               {}
func (*PlayerEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PlayerEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PlayerEvent) GetType() PlayerEventType {
	if m != nil {
		return m.Type
	}
	return PlayerEventType_PLAYER_ENTER
}

func (m *PlayerEvent) GetMove() *PlayerMoveEvent {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *PlayerEvent) GetPosition() *Vector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PlayerEvent) GetCast() *PlayerCastEvent {
	if m != nil {
		return m.Cast
	}
	return nil
}

func (m *PlayerEvent) GetDamage() float32 {
	if m != nil {
		return m.Damage
	}
	return 0
}

func (m *PlayerEvent) GetAppearance() *PlayerAppearance {
	if m != nil {
		return m.Appearance
	}
	return nil
}

func (m *PlayerEvent) GetEquiped() *PlayerEquiped {
	if m != nil {
		return m.Equiped
	}
	return nil
}

func (m *PlayerEvent) GetAnimation() *PlayerAnimationEvent {
	if m != nil {
		return m.Animation
	}
	return nil
}

type MonsterSpawnEvent struct {
	Id         string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	DemonType  int32   `protobuf:"varint,2,opt,name=demonType" json:"demonType,omitempty"`
	DemonSkin  int32   `protobuf:"varint,3,opt,name=demonSkin" json:"demonSkin,omitempty"`
	WeaponType int32   `protobuf:"varint,4,opt,name=weaponType" json:"weaponType,omitempty"`
	Position   *Vector `protobuf:"bytes,5,opt,name=position" json:"position,omitempty"`
}

func (m *MonsterSpawnEvent) Reset()                    { *m = MonsterSpawnEvent{} }
func (m *MonsterSpawnEvent) String() string            { return proto.CompactTextString(m) }
func (*MonsterSpawnEvent) ProtoMessage()               {}
func (*MonsterSpawnEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MonsterSpawnEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MonsterSpawnEvent) GetDemonType() int32 {
	if m != nil {
		return m.DemonType
	}
	return 0
}

func (m *MonsterSpawnEvent) GetDemonSkin() int32 {
	if m != nil {
		return m.DemonSkin
	}
	return 0
}

func (m *MonsterSpawnEvent) GetWeaponType() int32 {
	if m != nil {
		return m.WeaponType
	}
	return 0
}

func (m *MonsterSpawnEvent) GetPosition() *Vector {
	if m != nil {
		return m.Position
	}
	return nil
}

type MonsterMoveEvent struct {
	Position *Vector `protobuf:"bytes,1,opt,name=position" json:"position,omitempty"`
	Target   *Vector `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *MonsterMoveEvent) Reset()                    { *m = MonsterMoveEvent{} }
func (m *MonsterMoveEvent) String() string            { return proto.CompactTextString(m) }
func (*MonsterMoveEvent) ProtoMessage()               {}
func (*MonsterMoveEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MonsterMoveEvent) GetPosition() *Vector {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *MonsterMoveEvent) GetTarget() *Vector {
	if m != nil {
		return m.Target
	}
	return nil
}

type MonsterLootEvent struct {
	PlayerId  string `protobuf:"bytes,1,opt,name=playerId" json:"playerId,omitempty"`
	ItemId    string `protobuf:"bytes,2,opt,name=itemId" json:"itemId,omitempty"`
	MonsterId string `protobuf:"bytes,3,opt,name=monsterId" json:"monsterId,omitempty"`
}

func (m *MonsterLootEvent) Reset()                    { *m = MonsterLootEvent{} }
func (m *MonsterLootEvent) String() string            { return proto.CompactTextString(m) }
func (*MonsterLootEvent) ProtoMessage()               {}
func (*MonsterLootEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MonsterLootEvent) GetPlayerId() string {
	if m != nil {
		return m.PlayerId
	}
	return ""
}

func (m *MonsterLootEvent) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

func (m *MonsterLootEvent) GetMonsterId() string {
	if m != nil {
		return m.MonsterId
	}
	return ""
}

type MonsterDieEvent struct {
	Items []int32 `protobuf:"varint,1,rep,packed,name=items" json:"items,omitempty"`
}

func (m *MonsterDieEvent) Reset()                    { *m = MonsterDieEvent{} }
func (m *MonsterDieEvent) String() string            { return proto.CompactTextString(m) }
func (*MonsterDieEvent) ProtoMessage()               {}
func (*MonsterDieEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MonsterDieEvent) GetItems() []int32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type MonsterEvent struct {
	Id    string             `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type  MonsterEventType   `protobuf:"varint,2,opt,name=type,enum=tob.MonsterEventType" json:"type,omitempty"`
	Spawn *MonsterSpawnEvent `protobuf:"bytes,3,opt,name=spawn" json:"spawn,omitempty"`
	Loot  *MonsterLootEvent  `protobuf:"bytes,4,opt,name=loot" json:"loot,omitempty"`
	Move  *MonsterMoveEvent  `protobuf:"bytes,5,opt,name=move" json:"move,omitempty"`
	Die   *MonsterDieEvent   `protobuf:"bytes,6,opt,name=die" json:"die,omitempty"`
}

func (m *MonsterEvent) Reset()                    { *m = MonsterEvent{} }
func (m *MonsterEvent) String() string            { return proto.CompactTextString(m) }
func (*MonsterEvent) ProtoMessage()               {}
func (*MonsterEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MonsterEvent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MonsterEvent) GetType() MonsterEventType {
	if m != nil {
		return m.Type
	}
	return MonsterEventType_MONSTER_SPAWN
}

func (m *MonsterEvent) GetSpawn() *MonsterSpawnEvent {
	if m != nil {
		return m.Spawn
	}
	return nil
}

func (m *MonsterEvent) GetLoot() *MonsterLootEvent {
	if m != nil {
		return m.Loot
	}
	return nil
}

func (m *MonsterEvent) GetMove() *MonsterMoveEvent {
	if m != nil {
		return m.Move
	}
	return nil
}

func (m *MonsterEvent) GetDie() *MonsterDieEvent {
	if m != nil {
		return m.Die
	}
	return nil
}

type Event struct {
	Topic EventTopic    `protobuf:"varint,1,opt,name=topic,enum=tob.EventTopic" json:"topic,omitempty"`
	S     *ServerEvent  `protobuf:"bytes,2,opt,name=s" json:"s,omitempty"`
	P     *PlayerEvent  `protobuf:"bytes,3,opt,name=p" json:"p,omitempty"`
	M     *MonsterEvent `protobuf:"bytes,4,opt,name=m" json:"m,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Event) GetTopic() EventTopic {
	if m != nil {
		return m.Topic
	}
	return EventTopic_SERVER_EVENT
}

func (m *Event) GetS() *ServerEvent {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *Event) GetP() *PlayerEvent {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Event) GetM() *MonsterEvent {
	if m != nil {
		return m.M
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "tob.Empty")
	proto.RegisterType((*ServerChangeEvent)(nil), "tob.ServerChangeEvent")
	proto.RegisterType((*ServerEvent)(nil), "tob.ServerEvent")
	proto.RegisterType((*Vector)(nil), "tob.Vector")
	proto.RegisterType((*PlayerMoveEvent)(nil), "tob.PlayerMoveEvent")
	proto.RegisterType((*PlayerCastEvent)(nil), "tob.PlayerCastEvent")
	proto.RegisterType((*PlayerAppearance)(nil), "tob.PlayerAppearance")
	proto.RegisterType((*PlayerEquiped)(nil), "tob.PlayerEquiped")
	proto.RegisterType((*PlayerAnimationEvent)(nil), "tob.PlayerAnimationEvent")
	proto.RegisterType((*PlayerEvent)(nil), "tob.PlayerEvent")
	proto.RegisterType((*MonsterSpawnEvent)(nil), "tob.MonsterSpawnEvent")
	proto.RegisterType((*MonsterMoveEvent)(nil), "tob.MonsterMoveEvent")
	proto.RegisterType((*MonsterLootEvent)(nil), "tob.MonsterLootEvent")
	proto.RegisterType((*MonsterDieEvent)(nil), "tob.MonsterDieEvent")
	proto.RegisterType((*MonsterEvent)(nil), "tob.MonsterEvent")
	proto.RegisterType((*Event)(nil), "tob.Event")
	proto.RegisterEnum("tob.EventTopic", EventTopic_name, EventTopic_value)
	proto.RegisterEnum("tob.ServerEventType", ServerEventType_name, ServerEventType_value)
	proto.RegisterEnum("tob.PlayerEventType", PlayerEventType_name, PlayerEventType_value)
	proto.RegisterEnum("tob.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("tob.MonsterEventType", MonsterEventType_name, MonsterEventType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ToB service

type ToBClient interface {
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ToB_SubscribeClient, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (ToB_PublishClient, error)
}

type toBClient struct {
	cc *grpc.ClientConn
}

func NewToBClient(cc *grpc.ClientConn) ToBClient {
	return &toBClient{cc}
}

func (c *toBClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (ToB_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ToB_serviceDesc.Streams[0], c.cc, "/tob.ToB/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &toBSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ToB_SubscribeClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type toBSubscribeClient struct {
	grpc.ClientStream
}

func (x *toBSubscribeClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *toBClient) Publish(ctx context.Context, opts ...grpc.CallOption) (ToB_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ToB_serviceDesc.Streams[1], c.cc, "/tob.ToB/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &toBPublishClient{stream}
	return x, nil
}

type ToB_PublishClient interface {
	Send(*Event) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type toBPublishClient struct {
	grpc.ClientStream
}

func (x *toBPublishClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *toBPublishClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ToB service

type ToBServer interface {
	Subscribe(*Empty, ToB_SubscribeServer) error
	Publish(ToB_PublishServer) error
}

func RegisterToBServer(s *grpc.Server, srv ToBServer) {
	s.RegisterService(&_ToB_serviceDesc, srv)
}

func _ToB_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ToBServer).Subscribe(m, &toBSubscribeServer{stream})
}

type ToB_SubscribeServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type toBSubscribeServer struct {
	grpc.ServerStream
}

func (x *toBSubscribeServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ToB_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ToBServer).Publish(&toBPublishServer{stream})
}

type ToB_PublishServer interface {
	SendAndClose(*Empty) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type toBPublishServer struct {
	grpc.ServerStream
}

func (x *toBPublishServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *toBPublishServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ToB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tob.ToB",
	HandlerType: (*ToBServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _ToB_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Publish",
			Handler:       _ToB_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "tob.proto",
}

func init() { proto.RegisterFile("tob.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdb, 0x72, 0xdb, 0x44,
	0x18, 0xee, 0xda, 0x96, 0x0f, 0x7f, 0x5a, 0x5b, 0xd9, 0x86, 0x22, 0x32, 0x9d, 0x92, 0x51, 0xa7,
	0x6d, 0x9a, 0xe9, 0x74, 0x98, 0x74, 0x80, 0x6b, 0xd5, 0x11, 0xa9, 0xc1, 0xa7, 0xae, 0x95, 0x40,
	0xaf, 0xca, 0xda, 0x5a, 0x62, 0x0d, 0x96, 0x56, 0x48, 0x4a, 0x5a, 0xf7, 0x25, 0xb8, 0xe0, 0x25,
	0xb8, 0xe2, 0x09, 0x78, 0x16, 0xde, 0x82, 0x1b, 0xae, 0x98, 0x3d, 0xe8, 0x60, 0x27, 0x74, 0xb8,
	0xd3, 0xff, 0xed, 0xf7, 0x7f, 0xff, 0xfe, 0xa7, 0xb5, 0xa1, 0x93, 0xf1, 0xf9, 0xf3, 0x38, 0xe1,
	0x19, 0xc7, 0xf5, 0x8c, 0xcf, 0xed, 0x16, 0x18, 0x6e, 0x18, 0x67, 0x6b, 0x7b, 0x00, 0xbb, 0x33,
	0x96, 0x5c, 0xb1, 0xa4, 0xbf, 0xa4, 0xd1, 0x05, 0x73, 0xaf, 0x58, 0x94, 0xe1, 0x7d, 0x68, 0xc7,
	0x09, 0xbb, 0x0a, 0xf8, 0x65, 0x6a, 0xa1, 0x03, 0x74, 0xd8, 0x21, 0x85, 0x8d, 0x2d, 0x68, 0x2d,
	0x2e, 0x93, 0x84, 0x45, 0x99, 0x55, 0x93, 0x47, 0xb9, 0x69, 0x9f, 0xc2, 0x8e, 0x92, 0x52, 0x22,
	0x5d, 0xa8, 0x05, 0xbe, 0x76, 0xaf, 0x05, 0x3e, 0x3e, 0x84, 0x46, 0xb6, 0x8e, 0x99, 0xf4, 0xea,
	0x1e, 0xef, 0x3d, 0x17, 0x37, 0xaa, 0xf0, 0xbd, 0x75, 0xcc, 0x88, 0x64, 0xd8, 0xc7, 0xd0, 0x3c,
	0x67, 0x8b, 0x8c, 0x27, 0xf8, 0x36, 0xa0, 0xf7, 0x52, 0xa2, 0x46, 0xd0, 0x7b, 0x61, 0xad, 0xa5,
	0x7b, 0x8d, 0xa0, 0xb5, 0xb0, 0x3e, 0x58, 0x75, 0x65, 0x7d, 0xb0, 0x29, 0xf4, 0xa6, 0x2b, 0xba,
	0x66, 0xc9, 0x88, 0x5f, 0xe9, 0x2c, 0x1e, 0x42, 0x33, 0xa3, 0xc9, 0x05, 0xcb, 0xa4, 0xc2, 0xce,
	0xf1, 0x8e, 0x0c, 0xa9, 0x94, 0x89, 0x3e, 0xc2, 0x4f, 0xa1, 0xe3, 0x07, 0x09, 0x5b, 0x64, 0x01,
	0x8f, 0xa4, 0xf6, 0x16, 0xaf, 0x3c, 0xb5, 0x93, 0x3c, 0x44, 0x9f, 0xa6, 0xd9, 0xcd, 0x39, 0xee,
	0x43, 0x5b, 0xe9, 0x0e, 0x7c, 0x5d, 0x9d, 0xc2, 0xc6, 0x2f, 0xa0, 0xab, 0xbe, 0xa7, 0x3c, 0x0d,
	0x64, 0xb8, 0xfa, 0xf5, 0x70, 0x5b, 0x14, 0x3b, 0x00, 0x53, 0xc5, 0x74, 0xe2, 0x98, 0xd1, 0x84,
	0x46, 0x0b, 0x86, 0x31, 0x34, 0x22, 0x1a, 0x32, 0x1d, 0x56, 0x7e, 0x8b, 0x5c, 0x2f, 0x58, 0xe4,
	0xb3, 0x44, 0x97, 0x57, 0x89, 0x9e, 0x4a, 0x88, 0xe8, 0x23, 0x7c, 0x1f, 0x3a, 0x4b, 0x1a, 0x24,
	0x7d, 0xbe, 0xe2, 0x89, 0x0c, 0x6e, 0x90, 0x12, 0xb0, 0x7f, 0x43, 0x70, 0x47, 0xc5, 0x72, 0x7f,
	0xb9, 0x0c, 0x62, 0xe6, 0xe3, 0x7b, 0xd0, 0x7c, 0xc7, 0x68, 0xcc, 0x23, 0x1d, 0x4a, 0x5b, 0xe2,
	0x02, 0x4b, 0x46, 0xf3, 0x0c, 0xe5, 0x37, 0xde, 0x03, 0x63, 0xb1, 0x64, 0x69, 0x26, 0x75, 0x3b,
	0x44, 0x19, 0x82, 0xb9, 0x62, 0x17, 0xa9, 0xd5, 0x50, 0x4c, 0xf1, 0x2d, 0x98, 0xe9, 0x92, 0xb3,
	0xd4, 0x32, 0x14, 0x53, 0x1a, 0x22, 0x56, 0xba, 0x0c, 0xd8, 0xca, 0xb7, 0x9a, 0x2a, 0x96, 0xb2,
	0xec, 0x3f, 0x11, 0xec, 0xe9, 0x0a, 0x44, 0x41, 0x48, 0x45, 0x51, 0x54, 0xe9, 0xef, 0x43, 0x27,
	0xcd, 0x68, 0xc6, 0x5e, 0xd1, 0x74, 0x69, 0xa1, 0x83, 0xba, 0x48, 0xa6, 0x00, 0xf0, 0x63, 0xe8,
	0x46, 0x3c, 0x09, 0xe9, 0x2a, 0xf8, 0xc0, 0x7c, 0x2f, 0x08, 0xc5, 0xd8, 0xd5, 0x0f, 0x6b, 0x64,
	0x0b, 0x15, 0x2a, 0x41, 0x94, 0x4d, 0x69, 0x42, 0xc3, 0xd4, 0xaa, 0x2b, 0x95, 0x02, 0xc0, 0x07,
	0xb0, 0xf3, 0xd3, 0x8a, 0xd3, 0xfc, 0xbc, 0x21, 0x25, 0xaa, 0x10, 0x7e, 0x00, 0x30, 0xe7, 0x7c,
	0xa5, 0x09, 0xc6, 0x41, 0xfd, 0xb0, 0x4d, 0x2a, 0x88, 0xfd, 0x4f, 0x0d, 0x76, 0x74, 0x51, 0xff,
	0xf7, 0x52, 0x54, 0xf8, 0xe5, 0x52, 0x08, 0x66, 0xc8, 0xaf, 0x98, 0x1e, 0x9a, 0x2a, 0xb3, 0x98,
	0x78, 0x22, 0x19, 0xf8, 0x09, 0xb4, 0xe3, 0x7c, 0xc4, 0x1a, 0xd7, 0x47, 0xac, 0x38, 0x14, 0x92,
	0x0b, 0x9a, 0x66, 0xb2, 0x11, 0x9b, 0x92, 0xc5, 0x84, 0x13, 0xc9, 0x10, 0xdd, 0xf1, 0x69, 0x48,
	0x2f, 0x98, 0xec, 0x4e, 0x8d, 0x68, 0x0b, 0x7f, 0x09, 0x40, 0x8b, 0xc1, 0xb4, 0x5a, 0x52, 0xe7,
	0x93, 0x8a, 0x4e, 0x39, 0xb5, 0xa4, 0x42, 0xc4, 0xcf, 0xa0, 0xc5, 0xd4, 0x8c, 0x59, 0x6d, 0xe9,
	0x83, 0xab, 0x89, 0xab, 0x13, 0x92, 0x53, 0xf0, 0xd7, 0xd0, 0xa1, 0x79, 0xef, 0xad, 0x8e, 0xe4,
	0x7f, 0x56, 0x8d, 0xb1, 0x31, 0x17, 0xa4, 0xe4, 0xda, 0xbf, 0x23, 0xd8, 0x1d, 0xf1, 0x28, 0xcd,
	0x58, 0x32, 0x8b, 0xe9, 0xbb, 0xe8, 0xe6, 0x16, 0xdc, 0x87, 0x8e, 0xcf, 0x42, 0x1e, 0x79, 0x79,
	0x1f, 0x0c, 0x52, 0x02, 0xc5, 0xe9, 0xec, 0xe7, 0x20, 0xca, 0x77, 0xa6, 0x00, 0x44, 0xfb, 0xd5,
	0x4e, 0x48, 0xe7, 0x86, 0x3c, 0xae, 0x20, 0x1b, 0xad, 0x30, 0x3e, 0xd2, 0x0a, 0xfb, 0x47, 0x30,
	0xf5, 0x4d, 0xcb, 0xf7, 0xab, 0xea, 0x8c, 0x3e, 0xd6, 0xc7, 0xf2, 0xa1, 0xab, 0xfd, 0xe7, 0x43,
	0x67, 0xfb, 0x45, 0x84, 0x21, 0xe7, 0x59, 0xf9, 0xce, 0xcb, 0x1a, 0x0e, 0xfc, 0xe2, 0x9d, 0xd7,
	0xb6, 0x68, 0x79, 0x90, 0xb1, 0xb0, 0x78, 0xc8, 0xb4, 0x25, 0x0a, 0x12, 0x2a, 0x9d, 0x81, 0xaf,
	0x97, 0xbd, 0x04, 0xec, 0x27, 0xd0, 0xd3, 0x51, 0x4e, 0x02, 0x9d, 0xc6, 0x1e, 0x18, 0xc2, 0x35,
	0xd5, 0x4b, 0xaa, 0x0c, 0xfb, 0x6f, 0x04, 0xb7, 0x35, 0xf3, 0xe6, 0xb6, 0x3c, 0xdd, 0xd8, 0x0c,
	0x35, 0x54, 0x55, 0x87, 0xca, 0x6a, 0x3c, 0x03, 0x23, 0x15, 0xfd, 0xd5, 0xbb, 0x71, 0xaf, 0xca,
	0x2d, 0x1b, 0x4f, 0x14, 0x49, 0x08, 0xaf, 0x38, 0xcf, 0xf4, 0x6a, 0x6c, 0x08, 0x17, 0x95, 0x21,
	0x92, 0x22, 0xa8, 0x72, 0xe7, 0x8c, 0xeb, 0xd4, 0xed, 0xa5, 0x7b, 0x0c, 0x75, 0x3f, 0x50, 0xeb,
	0x91, 0xaf, 0xd2, 0x56, 0x21, 0x88, 0x20, 0xd8, 0xbf, 0x22, 0x30, 0x54, 0xc2, 0x8f, 0xc0, 0xc8,
	0x78, 0x1c, 0x2c, 0x64, 0xce, 0xdd, 0xe3, 0x9e, 0xf4, 0x51, 0xa9, 0x09, 0x98, 0xa8, 0x53, 0xfc,
	0x00, 0x50, 0xaa, 0xfb, 0x6a, 0x6e, 0xff, 0x66, 0x12, 0x24, 0x5e, 0x20, 0x14, 0xeb, 0xc4, 0xcd,
	0xed, 0xe7, 0x83, 0xa0, 0x18, 0x7f, 0x0e, 0x28, 0xd4, 0xb9, 0xee, 0x5e, 0x2b, 0x22, 0x41, 0xe1,
	0x51, 0x1f, 0xa0, 0x8c, 0x8a, 0x4d, 0xb8, 0x3d, 0x73, 0xc9, 0xb9, 0x4b, 0xde, 0xba, 0xe7, 0xee,
	0xd8, 0x33, 0x6f, 0x09, 0x64, 0x3a, 0x74, 0xde, 0x14, 0x08, 0xc2, 0xbb, 0x70, 0x67, 0x34, 0x19,
	0xcf, 0xbc, 0x02, 0xaa, 0x1d, 0x7d, 0x05, 0xbd, 0xad, 0xdf, 0x72, 0xc1, 0xd2, 0x4a, 0xfd, 0x57,
	0xce, 0xf8, 0xd4, 0x55, 0x52, 0x1a, 0x7a, 0x33, 0x70, 0x87, 0x27, 0x26, 0x3a, 0xfa, 0x0b, 0xe5,
	0x3f, 0xaa, 0xa5, 0x63, 0x25, 0xe0, 0xd8, 0x73, 0x89, 0x79, 0x0b, 0xf7, 0x60, 0x27, 0x47, 0x7e,
	0x18, 0x88, 0x1b, 0x94, 0xc0, 0x68, 0x72, 0xee, 0x9a, 0xb5, 0x0a, 0xd0, 0x77, 0x66, 0x9e, 0x59,
	0xc7, 0x18, 0xba, 0x1a, 0x38, 0x71, 0x46, 0xce, 0xa9, 0x7b, 0x62, 0x36, 0x70, 0x17, 0x20, 0xc7,
	0x06, 0xae, 0x69, 0x54, 0x9c, 0xbe, 0x3d, 0x1b, 0x4d, 0xcd, 0xa6, 0xb8, 0x72, 0xae, 0x42, 0x26,
	0x67, 0xfd, 0x57, 0x66, 0x0b, 0xdf, 0x85, 0x9e, 0x86, 0xa6, 0x93, 0xd9, 0xc0, 0x1b, 0x4c, 0xc6,
	0x66, 0xbb, 0x02, 0xba, 0xaf, 0xcf, 0x06, 0xd3, 0xa9, 0x7b, 0x62, 0x76, 0xf0, 0x1e, 0x98, 0x1a,
	0x74, 0xc6, 0x83, 0x91, 0x23, 0xa9, 0x70, 0xf4, 0x00, 0x9a, 0xea, 0x57, 0x18, 0xb7, 0xa1, 0x31,
	0x72, 0x86, 0xa2, 0x0c, 0x00, 0xcd, 0x6f, 0x5c, 0xf9, 0x8d, 0x8e, 0xfe, 0x40, 0xc5, 0x5e, 0x6e,
	0x94, 0x2e, 0x2f, 0xf0, 0x6c, 0xea, 0x7c, 0x3f, 0x56, 0xa5, 0xcb, 0x21, 0x99, 0x32, 0x12, 0x19,
	0xe6, 0x88, 0xe3, 0x79, 0x4e, 0xff, 0x3b, 0x55, 0x86, 0x1c, 0x13, 0x29, 0xd6, 0xc5, 0x4d, 0x0b,
	0xc0, 0x9d, 0x79, 0x64, 0xf2, 0xc6, 0x6c, 0x54, 0xb5, 0x86, 0x93, 0x89, 0x67, 0x1a, 0xf8, 0x53,
	0xb8, 0x5b, 0x45, 0xde, 0x12, 0x77, 0x76, 0x36, 0xf4, 0xcc, 0x66, 0x95, 0xfa, 0x52, 0x84, 0x68,
	0x1d, 0xbf, 0x86, 0xba, 0xc7, 0x5f, 0xe2, 0x47, 0xd0, 0x99, 0x5d, 0xce, 0xd3, 0x45, 0x12, 0xcc,
	0x19, 0x06, 0x35, 0xbb, 0xe2, 0x0f, 0xe5, 0x3e, 0x94, 0x73, 0xfc, 0x05, 0xc2, 0x0f, 0xa1, 0x35,
	0xbd, 0x9c, 0xaf, 0x82, 0x74, 0x89, 0x2b, 0x07, 0xfb, 0x15, 0x87, 0x43, 0x34, 0x6f, 0xca, 0x3f,
	0xa6, 0x2f, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xad, 0x25, 0x94, 0xc2, 0xa5, 0x0a, 0x00, 0x00,
}
